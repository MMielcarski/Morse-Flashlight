
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a26  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000024a  00800060  00000a26  00000aba  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000000c3  008002aa  008002aa  00000d04  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d18  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00000d54  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000133b  00000000  00000000  00000db4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000060a  00000000  00000000  000020ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000385  00000000  00000000  000026f9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002dc  00000000  00000000  00002a80  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000038e  00000000  00000000  00002d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009e5  00000000  00000000  000030ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00003acf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 04 04 	jmp	0x808	; 0x808 <__vector_4>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	12 e0       	ldi	r17, 0x02	; 2
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e6 e2       	ldi	r30, 0x26	; 38
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 3a       	cpi	r26, 0xAA	; 170
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	23 e0       	ldi	r18, 0x03	; 3
  78:	aa ea       	ldi	r26, 0xAA	; 170
  7a:	b2 e0       	ldi	r27, 0x02	; 2
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ad 36       	cpi	r26, 0x6D	; 109
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 28 04 	call	0x850	; 0x850 <main>
  8a:	0c 94 11 05 	jmp	0xa22	; 0xa22 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <_LCD_OutNibble>:
// Funkcja wystawiaj�ca p�bajt na magistral� danych
//
//-------------------------------------------------------------------------------------------------
void _LCD_OutNibble(unsigned char nibbleToWrite)
{
if(nibbleToWrite & 0x01)
  92:	80 ff       	sbrs	r24, 0
  94:	02 c0       	rjmp	.+4      	; 0x9a <_LCD_OutNibble+0x8>
	LCD_DB4_PORT |= LCD_DB4;
  96:	96 9a       	sbi	0x12, 6	; 18
  98:	01 c0       	rjmp	.+2      	; 0x9c <_LCD_OutNibble+0xa>
else
	LCD_DB4_PORT  &= ~LCD_DB4;
  9a:	96 98       	cbi	0x12, 6	; 18

if(nibbleToWrite & 0x02)
  9c:	81 ff       	sbrs	r24, 1
  9e:	02 c0       	rjmp	.+4      	; 0xa4 <_LCD_OutNibble+0x12>
	LCD_DB5_PORT |= LCD_DB5;
  a0:	95 9a       	sbi	0x12, 5	; 18
  a2:	01 c0       	rjmp	.+2      	; 0xa6 <_LCD_OutNibble+0x14>
else
	LCD_DB5_PORT  &= ~LCD_DB5;
  a4:	95 98       	cbi	0x12, 5	; 18

if(nibbleToWrite & 0x04)
  a6:	82 ff       	sbrs	r24, 2
  a8:	02 c0       	rjmp	.+4      	; 0xae <_LCD_OutNibble+0x1c>
	LCD_DB6_PORT |= LCD_DB6;
  aa:	94 9a       	sbi	0x12, 4	; 18
  ac:	01 c0       	rjmp	.+2      	; 0xb0 <_LCD_OutNibble+0x1e>
else
	LCD_DB6_PORT  &= ~LCD_DB6;
  ae:	94 98       	cbi	0x12, 4	; 18

if(nibbleToWrite & 0x08)
  b0:	83 ff       	sbrs	r24, 3
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <_LCD_OutNibble+0x26>
	LCD_DB7_PORT |= LCD_DB7;
  b4:	93 9a       	sbi	0x12, 3	; 18
  b6:	08 95       	ret
else
	LCD_DB7_PORT  &= ~LCD_DB7;
  b8:	93 98       	cbi	0x12, 3	; 18
  ba:	08 95       	ret

000000bc <_LCD_Write>:
//
// Funkcja zapisu bajtu do wy�wietacza (bez rozr�nienia instrukcja/dane).
//
//-------------------------------------------------------------------------------------------------
void _LCD_Write(unsigned char dataToWrite)
{
  bc:	cf 93       	push	r28
  be:	c8 2f       	mov	r28, r24
LCD_E_PORT |= LCD_E;
  c0:	97 9a       	sbi	0x12, 7	; 18
_LCD_OutNibble(dataToWrite >> 4);
  c2:	82 95       	swap	r24
  c4:	8f 70       	andi	r24, 0x0F	; 15
  c6:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
  ca:	97 98       	cbi	0x12, 7	; 18
LCD_E_PORT |= LCD_E;
  cc:	97 9a       	sbi	0x12, 7	; 18
_LCD_OutNibble(dataToWrite);
  ce:	8c 2f       	mov	r24, r28
  d0:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E;
  d4:	97 98       	cbi	0x12, 7	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d6:	80 e1       	ldi	r24, 0x10	; 16
  d8:	8a 95       	dec	r24
  da:	f1 f7       	brne	.-4      	; 0xd8 <_LCD_Write+0x1c>
  dc:	00 c0       	rjmp	.+0      	; 0xde <_LCD_Write+0x22>
_delay_us(50);
}
  de:	cf 91       	pop	r28
  e0:	08 95       	ret

000000e2 <LCD_WriteCommand>:
// Funkcja zapisu rozkazu do wy�wietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteCommand(unsigned char commandToWrite)
{
LCD_RS_PORT &= ~LCD_RS;
  e2:	a8 98       	cbi	0x15, 0	; 21
_LCD_Write(commandToWrite);
  e4:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_LCD_Write>

000000e8 <LCD_WriteData>:
// Funkcja zapisu danych do pami�ci wy�wietlacza
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteData(unsigned char dataToWrite)
{
LCD_RS_PORT |= LCD_RS;
  e8:	a8 9a       	sbi	0x15, 0	; 21
_LCD_Write(dataToWrite);
  ea:	0c 94 5e 00 	jmp	0xbc	; 0xbc <_LCD_Write>

000000ee <LCD_WriteText>:
//
// Funkcja wy�wietlenia napisu na wyswietlaczu.
//
//-------------------------------------------------------------------------------------------------
void LCD_WriteText(char * text)
{
  ee:	cf 93       	push	r28
  f0:	df 93       	push	r29
  f2:	ec 01       	movw	r28, r24
while(*text)
  f4:	89 91       	ld	r24, Y+
  f6:	88 23       	and	r24, r24
  f8:	19 f0       	breq	.+6      	; 0x100 <LCD_WriteText+0x12>
  LCD_WriteData(*text++);
  fa:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_WriteData>
  fe:	fa cf       	rjmp	.-12     	; 0xf4 <LCD_WriteText+0x6>
}
 100:	df 91       	pop	r29
 102:	cf 91       	pop	r28
 104:	08 95       	ret

00000106 <LCD_GoTo>:
// Funkcja ustawienia wsp�rz�dnych ekranowych
//
//-------------------------------------------------------------------------------------------------
void LCD_GoTo(unsigned char x, unsigned char y)
{
LCD_WriteCommand(HD44780_DDRAM_SET | (x + (0x40 * y)));
 106:	90 e4       	ldi	r25, 0x40	; 64
 108:	69 9f       	mul	r22, r25
 10a:	80 0d       	add	r24, r0
 10c:	11 24       	eor	r1, r1
 10e:	80 68       	ori	r24, 0x80	; 128
 110:	0c 94 71 00 	jmp	0xe2	; 0xe2 <LCD_WriteCommand>

00000114 <LCD_Clear>:
// Funkcja czyszczenia ekranu wy�wietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Clear(void)
{
LCD_WriteCommand(HD44780_CLEAR);
 114:	81 e0       	ldi	r24, 0x01	; 1
 116:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	83 ef       	ldi	r24, 0xF3	; 243
 11c:	91 e0       	ldi	r25, 0x01	; 1
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <LCD_Clear+0xa>
 122:	00 c0       	rjmp	.+0      	; 0x124 <LCD_Clear+0x10>
 124:	00 00       	nop
 126:	08 95       	ret

00000128 <LCD_Home>:
// Funkcja przywr�cenia pocz�tkowych wsp�rz�dnych wy�wietlacza.
//
//-------------------------------------------------------------------------------------------------
void LCD_Home(void)
{
LCD_WriteCommand(HD44780_HOME);
 128:	82 e0       	ldi	r24, 0x02	; 2
 12a:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
 12e:	83 ef       	ldi	r24, 0xF3	; 243
 130:	91 e0       	ldi	r25, 0x01	; 1
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <LCD_Home+0xa>
 136:	00 c0       	rjmp	.+0      	; 0x138 <LCD_Home+0x10>
 138:	00 00       	nop
 13a:	08 95       	ret

0000013c <LCD_Initalize>:
//
// Procedura inicjalizacji kontrolera HD44780.
//
//-------------------------------------------------------------------------------------------------
void LCD_Initalize(void)
{
 13c:	cf 93       	push	r28
unsigned char i;
LCD_DB4_DIR |= LCD_DB4; // Konfiguracja kierunku pracy wyprowadze�
 13e:	8e 9a       	sbi	0x11, 6	; 17
LCD_DB5_DIR |= LCD_DB5; //
 140:	8d 9a       	sbi	0x11, 5	; 17
LCD_DB6_DIR |= LCD_DB6; //
 142:	8c 9a       	sbi	0x11, 4	; 17
LCD_DB7_DIR |= LCD_DB7; //
 144:	8b 9a       	sbi	0x11, 3	; 17
LCD_E_DIR 	|= LCD_E;   //
 146:	8f 9a       	sbi	0x11, 7	; 17
LCD_RS_DIR 	|= LCD_RS;  //
 148:	a0 9a       	sbi	0x14, 0	; 20
 14a:	85 ea       	ldi	r24, 0xA5	; 165
 14c:	9e e0       	ldi	r25, 0x0E	; 14
 14e:	01 97       	sbiw	r24, 0x01	; 1
 150:	f1 f7       	brne	.-4      	; 0x14e <LCD_Initalize+0x12>
 152:	00 c0       	rjmp	.+0      	; 0x154 <LCD_Initalize+0x18>
 154:	00 00       	nop
_delay_ms(15); // oczekiwanie na ustalibizowanie si� napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
 156:	a8 98       	cbi	0x15, 0	; 21
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E
 158:	97 98       	cbi	0x12, 7	; 18
 15a:	c3 e0       	ldi	r28, 0x03	; 3

for(i = 0; i < 3; i++) // trzykrotne powt�rzenie bloku instrukcji
  {
  LCD_E_PORT |= LCD_E; //  E = 1
 15c:	97 9a       	sbi	0x12, 7	; 18
  _LCD_OutNibble(0x03); // tryb 8-bitowy
 15e:	83 e0       	ldi	r24, 0x03	; 3
 160:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
  LCD_E_PORT &= ~LCD_E; // E = 0
 164:	97 98       	cbi	0x12, 7	; 18
 166:	81 ee       	ldi	r24, 0xE1	; 225
 168:	94 e0       	ldi	r25, 0x04	; 4
 16a:	01 97       	sbiw	r24, 0x01	; 1
 16c:	f1 f7       	brne	.-4      	; 0x16a <LCD_Initalize+0x2e>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <LCD_Initalize+0x34>
 170:	00 00       	nop
 172:	c1 50       	subi	r28, 0x01	; 1
LCD_RS_DIR 	|= LCD_RS;  //
_delay_ms(15); // oczekiwanie na ustalibizowanie si� napiecia zasilajacego
LCD_RS_PORT &= ~LCD_RS; // wyzerowanie linii RS
LCD_E_PORT &= ~LCD_E;  // wyzerowanie linii E

for(i = 0; i < 3; i++) // trzykrotne powt�rzenie bloku instrukcji
 174:	99 f7       	brne	.-26     	; 0x15c <LCD_Initalize+0x20>
  _LCD_OutNibble(0x03); // tryb 8-bitowy
  LCD_E_PORT &= ~LCD_E; // E = 0
  _delay_ms(5); // czekaj 5ms
  }

LCD_E_PORT |= LCD_E; // E = 1
 176:	97 9a       	sbi	0x12, 7	; 18
_LCD_OutNibble(0x02); // tryb 4-bitowy
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	0e 94 49 00 	call	0x92	; 0x92 <_LCD_OutNibble>
LCD_E_PORT &= ~LCD_E; // E = 0
 17e:	97 98       	cbi	0x12, 7	; 18
 180:	89 ef       	ldi	r24, 0xF9	; 249
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	01 97       	sbiw	r24, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <LCD_Initalize+0x48>
 188:	00 c0       	rjmp	.+0      	; 0x18a <LCD_Initalize+0x4e>
 18a:	00 00       	nop

_delay_ms(1); // czekaj 1ms 
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
 18c:	88 e2       	ldi	r24, 0x28	; 40
 18e:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy��czenie wyswietlacza
 192:	88 e0       	ldi	r24, 0x08	; 8
 194:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartos�i pamieci DDRAM
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
 19e:	83 ef       	ldi	r24, 0xF3	; 243
 1a0:	91 e0       	ldi	r25, 0x01	; 1
 1a2:	01 97       	sbiw	r24, 0x01	; 1
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <LCD_Initalize+0x66>
 1a6:	00 c0       	rjmp	.+0      	; 0x1a8 <LCD_Initalize+0x6c>
 1a8:	00 00       	nop
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
 1aa:	86 e0       	ldi	r24, 0x06	; 6
 1ac:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w��cz LCD, bez kursora i mrugania
 1b0:	8c e0       	ldi	r24, 0x0C	; 12
}
 1b2:	cf 91       	pop	r28
LCD_WriteCommand(HD44780_FUNCTION_SET | HD44780_FONT5x7 | HD44780_TWO_LINE | HD44780_4_BIT); // interfejs 4-bity, 2-linie, znak 5x7
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_OFF); // wy��czenie wyswietlacza
LCD_WriteCommand(HD44780_CLEAR); // czyszczenie zawartos�i pamieci DDRAM
_delay_ms(2);
LCD_WriteCommand(HD44780_ENTRY_MODE | HD44780_EM_SHIFT_CURSOR | HD44780_EM_INCREMENT);// inkrementaja adresu i przesuwanie kursora
LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK); // w��cz LCD, bez kursora i mrugania
 1b4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <LCD_WriteCommand>

000001b8 <delay_ms>:
	PORTC &= ~(1<<PC4);
	delay_ms(off);
}

void delay_ms( int ms)
{
 1b8:	cf 93       	push	r28
 1ba:	df 93       	push	r29
 1bc:	00 d0       	rcall	.+0      	; 0x1be <delay_ms+0x6>
 1be:	00 d0       	rcall	.+0      	; 0x1c0 <delay_ms+0x8>
 1c0:	cd b7       	in	r28, 0x3d	; 61
 1c2:	de b7       	in	r29, 0x3e	; 62
	volatile long unsigned int i;
	for(i=0;i<ms;i++)
 1c4:	19 82       	std	Y+1, r1	; 0x01
 1c6:	1a 82       	std	Y+2, r1	; 0x02
 1c8:	1b 82       	std	Y+3, r1	; 0x03
 1ca:	1c 82       	std	Y+4, r1	; 0x04
 1cc:	09 2e       	mov	r0, r25
 1ce:	00 0c       	add	r0, r0
 1d0:	aa 0b       	sbc	r26, r26
 1d2:	bb 0b       	sbc	r27, r27
 1d4:	49 81       	ldd	r20, Y+1	; 0x01
 1d6:	5a 81       	ldd	r21, Y+2	; 0x02
 1d8:	6b 81       	ldd	r22, Y+3	; 0x03
 1da:	7c 81       	ldd	r23, Y+4	; 0x04
 1dc:	48 17       	cp	r20, r24
 1de:	59 07       	cpc	r21, r25
 1e0:	6a 07       	cpc	r22, r26
 1e2:	7b 07       	cpc	r23, r27
 1e4:	98 f4       	brcc	.+38     	; 0x20c <delay_ms+0x54>
 1e6:	e9 ef       	ldi	r30, 0xF9	; 249
 1e8:	f0 e0       	ldi	r31, 0x00	; 0
 1ea:	31 97       	sbiw	r30, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <delay_ms+0x32>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <delay_ms+0x38>
 1f0:	00 00       	nop
 1f2:	49 81       	ldd	r20, Y+1	; 0x01
 1f4:	5a 81       	ldd	r21, Y+2	; 0x02
 1f6:	6b 81       	ldd	r22, Y+3	; 0x03
 1f8:	7c 81       	ldd	r23, Y+4	; 0x04
 1fa:	4f 5f       	subi	r20, 0xFF	; 255
 1fc:	5f 4f       	sbci	r21, 0xFF	; 255
 1fe:	6f 4f       	sbci	r22, 0xFF	; 255
 200:	7f 4f       	sbci	r23, 0xFF	; 255
 202:	49 83       	std	Y+1, r20	; 0x01
 204:	5a 83       	std	Y+2, r21	; 0x02
 206:	6b 83       	std	Y+3, r22	; 0x03
 208:	7c 83       	std	Y+4, r23	; 0x04
 20a:	e4 cf       	rjmp	.-56     	; 0x1d4 <delay_ms+0x1c>
		_delay_ms(1);
}
 20c:	0f 90       	pop	r0
 20e:	0f 90       	pop	r0
 210:	0f 90       	pop	r0
 212:	0f 90       	pop	r0
 214:	df 91       	pop	r29
 216:	cf 91       	pop	r28
 218:	08 95       	ret

0000021a <LCD_move.part.0>:
{
	//LCD_WriteCommand(HD44780_DISPLAY_CURSOR_SHIFT);
	//LCD_WriteCommand(HD44780_SHIFT_CURSOR);
	if(dir =='L')
	{
		LCD_WriteCommand(HD44780_DISPLAY_CURSOR_SHIFT|HD44780_SHIFT_DISPLAY|HD44780_SHIFT_RIGHT);
 21a:	8c e1       	ldi	r24, 0x1C	; 28
 21c:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
		LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
 220:	8c e0       	ldi	r24, 0x0C	; 12
 222:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
		delay_ms(20);
 226:	84 e1       	ldi	r24, 0x14	; 20
 228:	90 e0       	ldi	r25, 0x00	; 0
 22a:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <delay_ms>

0000022e <LCD_move>:

void LCD_move(char dir)
{
	//LCD_WriteCommand(HD44780_DISPLAY_CURSOR_SHIFT);
	//LCD_WriteCommand(HD44780_SHIFT_CURSOR);
	if(dir =='L')
 22e:	8c 34       	cpi	r24, 0x4C	; 76
 230:	11 f4       	brne	.+4      	; 0x236 <LCD_move+0x8>
 232:	0c 94 0d 01 	jmp	0x21a	; 0x21a <LCD_move.part.0>
	{
		LCD_WriteCommand(HD44780_DISPLAY_CURSOR_SHIFT|HD44780_SHIFT_DISPLAY|HD44780_SHIFT_RIGHT);
		LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
		delay_ms(20);
	}
	else if(dir =='R')
 236:	82 35       	cpi	r24, 0x52	; 82
 238:	51 f4       	brne	.+20     	; 0x24e <LCD_move+0x20>
	{
		LCD_WriteCommand(HD44780_DISPLAY_CURSOR_SHIFT|HD44780_SHIFT_DISPLAY|HD44780_SHIFT_LEFT);
 23a:	88 e1       	ldi	r24, 0x18	; 24
 23c:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
		LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
 240:	8c e0       	ldi	r24, 0x0C	; 12
 242:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
		delay_ms(20);
 246:	84 e1       	ldi	r24, 0x14	; 20
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <delay_ms>
 24e:	08 95       	ret

00000250 <LCD_moveMode>:
	}
}

void LCD_moveMode()
{
	if (!(PINC & 0x02))		//1 button push
 250:	99 99       	sbic	0x13, 1	; 19
 252:	06 c0       	rjmp	.+12     	; 0x260 <LCD_moveMode+0x10>
		{
			delay_ms(100);
 254:	84 e6       	ldi	r24, 0x64	; 100
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_ms>
 25c:	0e 94 0d 01 	call	0x21a	; 0x21a <LCD_move.part.0>
			//LCD_WriteText("pierwszy");
			LCD_move('L');
		}

		if (!(PINC & 0x04))		//2 button push
 260:	9a 99       	sbic	0x13, 2	; 19
 262:	07 c0       	rjmp	.+14     	; 0x272 <LCD_moveMode+0x22>
		{
			delay_ms(100);
 264:	84 e6       	ldi	r24, 0x64	; 100
 266:	90 e0       	ldi	r25, 0x00	; 0
 268:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_ms>
			//LCD_WriteText("drugi");
			LCD_move('R');
 26c:	82 e5       	ldi	r24, 0x52	; 82
 26e:	0c 94 17 01 	jmp	0x22e	; 0x22e <LCD_move>
 272:	08 95       	ret

00000274 <blinkLed>:
		}
}

void blinkLed(int on, int off)
{
 274:	cf 93       	push	r28
 276:	df 93       	push	r29
 278:	eb 01       	movw	r28, r22
	PORTC |= (1<<PC4);
 27a:	ac 9a       	sbi	0x15, 4	; 21
	delay_ms(on);
 27c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_ms>
	PORTC &= ~(1<<PC4);
 280:	ac 98       	cbi	0x15, 4	; 21
	delay_ms(off);
 282:	ce 01       	movw	r24, r28
}
 284:	df 91       	pop	r29
 286:	cf 91       	pop	r28
void blinkLed(int on, int off)
{
	PORTC |= (1<<PC4);
	delay_ms(on);
	PORTC &= ~(1<<PC4);
	delay_ms(off);
 288:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <delay_ms>

0000028c <broadcast>:
	}
return 0;
}

void broadcast(int period,int length)
{
 28c:	2f 92       	push	r2
 28e:	3f 92       	push	r3
 290:	4f 92       	push	r4
 292:	5f 92       	push	r5
 294:	6f 92       	push	r6
 296:	7f 92       	push	r7
 298:	8f 92       	push	r8
 29a:	9f 92       	push	r9
 29c:	af 92       	push	r10
 29e:	bf 92       	push	r11
 2a0:	cf 92       	push	r12
 2a2:	df 92       	push	r13
 2a4:	ef 92       	push	r14
 2a6:	ff 92       	push	r15
 2a8:	0f 93       	push	r16
 2aa:	1f 93       	push	r17
 2ac:	cf 93       	push	r28
 2ae:	df 93       	push	r29
 2b0:	00 d0       	rcall	.+0      	; 0x2b2 <broadcast+0x26>
 2b2:	00 d0       	rcall	.+0      	; 0x2b4 <broadcast+0x28>
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	7c 01       	movw	r14, r24
 2ba:	4b 01       	movw	r8, r22
	int symbolSpace = period/3;
 2bc:	63 e0       	ldi	r22, 0x03	; 3
 2be:	70 e0       	ldi	r23, 0x00	; 0
 2c0:	0e 94 e9 04 	call	0x9d2	; 0x9d2 <__divmodhi4>
 2c4:	5b 01       	movw	r10, r22
			}
			else if(morseTable[userInput[i]-97][j] == 1)	//dash
			{
				LCD_WriteData('0');
				morseInput[pos] = 0;
				blinkLed(period*3,symbolSpace);
 2c6:	c7 01       	movw	r24, r14
 2c8:	88 0f       	add	r24, r24
 2ca:	99 1f       	adc	r25, r25
 2cc:	9c 01       	movw	r18, r24
 2ce:	2e 0d       	add	r18, r14
 2d0:	3f 1d       	adc	r19, r15
 2d2:	3a 83       	std	Y+2, r19	; 0x02
 2d4:	29 83       	std	Y+1, r18	; 0x01
	//int wordSpace 	= 2*period;

	//LCD_Clear();
	int pos=0;
	//int L = (sizeof userInput)/(sizeof userInput[0]);
	for(int i=0;i<length;i++)
 2d6:	0a e4       	ldi	r16, 0x4A	; 74
 2d8:	13 e0       	ldi	r17, 0x03	; 3
	int symbolSpace = period/3;
	int letterSpace = period;
	//int wordSpace 	= 2*period;

	//LCD_Clear();
	int pos=0;
 2da:	1c 82       	std	Y+4, r1	; 0x04
 2dc:	1b 82       	std	Y+3, r1	; 0x03
 2de:	8b 81       	ldd	r24, Y+3	; 0x03
 2e0:	9c 81       	ldd	r25, Y+4	; 0x04
 2e2:	88 0f       	add	r24, r24
 2e4:	99 1f       	adc	r25, r25
	//int L = (sizeof userInput)/(sizeof userInput[0]);
	for(int i=0;i<length;i++)
 2e6:	98 01       	movw	r18, r16
 2e8:	2a 54       	subi	r18, 0x4A	; 74
 2ea:	33 40       	sbci	r19, 0x03	; 3
 2ec:	28 15       	cp	r18, r8
 2ee:	39 05       	cpc	r19, r9
 2f0:	0c f0       	brlt	.+2      	; 0x2f4 <broadcast+0x68>
 2f2:	67 c0       	rjmp	.+206    	; 0x3c2 <broadcast+0x136>
 2f4:	2b 80       	ldd	r2, Y+3	; 0x03
 2f6:	3c 80       	ldd	r3, Y+4	; 0x04
 2f8:	fc 01       	movw	r30, r24
 2fa:	e2 5f       	subi	r30, 0xF2	; 242
 2fc:	fc 4f       	sbci	r31, 0xFC	; 252
 2fe:	3f 01       	movw	r6, r30
 300:	c1 2c       	mov	r12, r1
 302:	d1 2c       	mov	r13, r1
 304:	4b 80       	ldd	r4, Y+3	; 0x03
 306:	5c 80       	ldd	r5, Y+4	; 0x04
 308:	42 18       	sub	r4, r2
 30a:	53 08       	sbc	r5, r3
	{
		int j=0;
		while(morseTable[userInput[i]-97][j] != 2)
 30c:	f8 01       	movw	r30, r16
 30e:	80 81       	ld	r24, Z
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	81 56       	subi	r24, 0x61	; 97
 314:	91 09       	sbc	r25, r1
 316:	27 e0       	ldi	r18, 0x07	; 7
 318:	28 9f       	mul	r18, r24
 31a:	f0 01       	movw	r30, r0
 31c:	29 9f       	mul	r18, r25
 31e:	f0 0d       	add	r31, r0
 320:	11 24       	eor	r1, r1
 322:	e4 0d       	add	r30, r4
 324:	f5 1d       	adc	r31, r5
 326:	ee 0f       	add	r30, r30
 328:	ff 1f       	adc	r31, r31
 32a:	e0 5a       	subi	r30, 0xA0	; 160
 32c:	ff 4f       	sbci	r31, 0xFF	; 255
 32e:	80 81       	ld	r24, Z
 330:	91 81       	ldd	r25, Z+1	; 0x01
 332:	02 97       	sbiw	r24, 0x02	; 2
 334:	09 f4       	brne	.+2      	; 0x338 <broadcast+0xac>
 336:	3f c0       	rjmp	.+126    	; 0x3b6 <broadcast+0x12a>
		{
			LCD_GoTo(pos,0);
 338:	60 e0       	ldi	r22, 0x00	; 0
 33a:	8b 81       	ldd	r24, Y+3	; 0x03
 33c:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GoTo>
			if(morseTable[userInput[i]-97][j] == 0)	//dot
 340:	f8 01       	movw	r30, r16
 342:	80 81       	ld	r24, Z
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	81 56       	subi	r24, 0x61	; 97
 348:	91 09       	sbc	r25, r1
 34a:	27 e0       	ldi	r18, 0x07	; 7
 34c:	28 9f       	mul	r18, r24
 34e:	f0 01       	movw	r30, r0
 350:	29 9f       	mul	r18, r25
 352:	f0 0d       	add	r31, r0
 354:	11 24       	eor	r1, r1
 356:	e4 0d       	add	r30, r4
 358:	f5 1d       	adc	r31, r5
 35a:	ee 0f       	add	r30, r30
 35c:	ff 1f       	adc	r31, r31
 35e:	e0 5a       	subi	r30, 0xA0	; 160
 360:	ff 4f       	sbci	r31, 0xFF	; 255
 362:	80 81       	ld	r24, Z
 364:	91 81       	ldd	r25, Z+1	; 0x01
 366:	00 97       	sbiw	r24, 0x00	; 0
 368:	69 f4       	brne	.+26     	; 0x384 <broadcast+0xf8>
			{

				LCD_WriteData('1');
 36a:	81 e3       	ldi	r24, 0x31	; 49
 36c:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_WriteData>
 370:	f3 01       	movw	r30, r6
 372:	ec 0d       	add	r30, r12
 374:	fd 1d       	adc	r31, r13
				morseInput[pos] = 1;
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	91 83       	std	Z+1, r25	; 0x01
 37c:	80 83       	st	Z, r24
				blinkLed(period,symbolSpace);
 37e:	b5 01       	movw	r22, r10
 380:	c7 01       	movw	r24, r14
 382:	0d c0       	rjmp	.+26     	; 0x39e <broadcast+0x112>
			}
			else if(morseTable[userInput[i]-97][j] == 1)	//dash
 384:	01 97       	sbiw	r24, 0x01	; 1
 386:	69 f4       	brne	.+26     	; 0x3a2 <broadcast+0x116>
			{
				LCD_WriteData('0');
 388:	80 e3       	ldi	r24, 0x30	; 48
 38a:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_WriteData>
 38e:	f3 01       	movw	r30, r6
 390:	ec 0d       	add	r30, r12
 392:	fd 1d       	adc	r31, r13
				morseInput[pos] = 0;
 394:	11 82       	std	Z+1, r1	; 0x01
 396:	10 82       	st	Z, r1
				blinkLed(period*3,symbolSpace);
 398:	b5 01       	movw	r22, r10
 39a:	89 81       	ldd	r24, Y+1	; 0x01
 39c:	9a 81       	ldd	r25, Y+2	; 0x02
 39e:	0e 94 3a 01 	call	0x274	; 0x274 <blinkLed>
			}
			j++;
			pos++;
 3a2:	2b 81       	ldd	r18, Y+3	; 0x03
 3a4:	3c 81       	ldd	r19, Y+4	; 0x04
 3a6:	2f 5f       	subi	r18, 0xFF	; 255
 3a8:	3f 4f       	sbci	r19, 0xFF	; 255
 3aa:	3c 83       	std	Y+4, r19	; 0x04
 3ac:	2b 83       	std	Y+3, r18	; 0x03
 3ae:	32 e0       	ldi	r19, 0x02	; 2
 3b0:	c3 0e       	add	r12, r19
 3b2:	d1 1c       	adc	r13, r1
 3b4:	a7 cf       	rjmp	.-178    	; 0x304 <broadcast+0x78>
		}
		delay_ms(letterSpace);
 3b6:	c7 01       	movw	r24, r14
 3b8:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_ms>
 3bc:	0f 5f       	subi	r16, 0xFF	; 255
 3be:	1f 4f       	sbci	r17, 0xFF	; 255
 3c0:	8e cf       	rjmp	.-228    	; 0x2de <broadcast+0x52>
	}
	morseInput[pos] = 2;
 3c2:	fc 01       	movw	r30, r24
 3c4:	e2 5f       	subi	r30, 0xF2	; 242
 3c6:	fc 4f       	sbci	r31, 0xFC	; 252
 3c8:	22 e0       	ldi	r18, 0x02	; 2
 3ca:	30 e0       	ldi	r19, 0x00	; 0
 3cc:	31 83       	std	Z+1, r19	; 0x01
 3ce:	20 83       	st	Z, r18
	//LCD_Clear();

}
 3d0:	0f 90       	pop	r0
 3d2:	0f 90       	pop	r0
 3d4:	0f 90       	pop	r0
 3d6:	0f 90       	pop	r0
 3d8:	df 91       	pop	r29
 3da:	cf 91       	pop	r28
 3dc:	1f 91       	pop	r17
 3de:	0f 91       	pop	r16
 3e0:	ff 90       	pop	r15
 3e2:	ef 90       	pop	r14
 3e4:	df 90       	pop	r13
 3e6:	cf 90       	pop	r12
 3e8:	bf 90       	pop	r11
 3ea:	af 90       	pop	r10
 3ec:	9f 90       	pop	r9
 3ee:	8f 90       	pop	r8
 3f0:	7f 90       	pop	r7
 3f2:	6f 90       	pop	r6
 3f4:	5f 90       	pop	r5
 3f6:	4f 90       	pop	r4
 3f8:	3f 90       	pop	r3
 3fa:	2f 90       	pop	r2
 3fc:	08 95       	ret

000003fe <LCD_clearLine>:
		_delay_ms(1);
}

void LCD_clearLine(int nr)
{
		LCD_GoTo(0,nr);
 3fe:	68 2f       	mov	r22, r24
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GoTo>
		LCD_WriteText("        ");
 406:	84 e9       	ldi	r24, 0x94	; 148
 408:	92 e0       	ldi	r25, 0x02	; 2
 40a:	0c 94 77 00 	jmp	0xee	; 0xee <LCD_WriteText>

0000040e <dial>:
	val = readEncoder();
	sei();
}

int dial()
{
 40e:	ef 92       	push	r14
 410:	ff 92       	push	r15
 412:	0f 93       	push	r16
 414:	1f 93       	push	r17
 416:	cf 93       	push	r28
 418:	df 93       	push	r29
	asciiNum = encoderCount+97;
 41a:	80 91 6b 03 	lds	r24, 0x036B
 41e:	90 91 6c 03 	lds	r25, 0x036C
 422:	8f 59       	subi	r24, 0x9F	; 159
 424:	9f 4f       	sbci	r25, 0xFF	; 255
 426:	90 93 69 03 	sts	0x0369, r25
 42a:	80 93 68 03 	sts	0x0368, r24
	if(asciiNum < 97) 	encoderCount = 0;
 42e:	81 36       	cpi	r24, 0x61	; 97
 430:	91 05       	cpc	r25, r1
 432:	2c f4       	brge	.+10     	; 0x43e <dial+0x30>
 434:	10 92 6c 03 	sts	0x036C, r1
 438:	10 92 6b 03 	sts	0x036B, r1
 43c:	09 c0       	rjmp	.+18     	; 0x450 <dial+0x42>
	if(asciiNum > 122)	encoderCount = 25;
 43e:	8b 37       	cpi	r24, 0x7B	; 123
 440:	91 05       	cpc	r25, r1
 442:	34 f0       	brlt	.+12     	; 0x450 <dial+0x42>
 444:	89 e1       	ldi	r24, 0x19	; 25
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	90 93 6c 03 	sts	0x036C, r25
 44c:	80 93 6b 03 	sts	0x036B, r24

	LCD_GoTo(lcdPos,0);
 450:	60 e0       	ldi	r22, 0x00	; 0
 452:	80 91 ae 02 	lds	r24, 0x02AE
 456:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GoTo>
	LCD_WriteData(asciiNum);	//wybor litery
 45a:	80 91 68 03 	lds	r24, 0x0368
 45e:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_WriteData>
	LCD_GoTo(lcdPos,1);
 462:	61 e0       	ldi	r22, 0x01	; 1
 464:	80 91 ae 02 	lds	r24, 0x02AE
 468:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GoTo>
	LCD_WriteData(94);			//strzalka
 46c:	8e e5       	ldi	r24, 0x5E	; 94
 46e:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_WriteData>
		//LCD_WriteCommand(HD44780_DISPLAY_CURSOR_SHIFT);
		//LCD_WriteCommand(HD44780_SHIFT_CURSOR);
		//LCD_WriteCommand(HD44780_SHIFT_LEFT);
		encoderTmp=encoderCount;
	}*/
	if(!(PINC & 0x02) && !(PINC & 0x04))
 472:	99 99       	sbic	0x13, 1	; 19
 474:	07 c0       	rjmp	.+14     	; 0x484 <dial+0x76>
 476:	9a 99       	sbic	0x13, 2	; 19
 478:	05 c0       	rjmp	.+10     	; 0x484 <dial+0x76>
	{
		LCD_Clear();
 47a:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Clear>
		return 1;
 47e:	c1 e0       	ldi	r28, 0x01	; 1
 480:	d0 e0       	ldi	r29, 0x00	; 0
 482:	95 c0       	rjmp	.+298    	; 0x5ae <dial+0x1a0>
	}

	if (!(PINA & 0x08) && btnFlag == 0)		//encoder button push
 484:	cb 99       	sbic	0x19, 3	; 25
 486:	13 c0       	rjmp	.+38     	; 0x4ae <dial+0xa0>
 488:	c0 91 ac 02 	lds	r28, 0x02AC
 48c:	d0 91 ad 02 	lds	r29, 0x02AD
 490:	20 97       	sbiw	r28, 0x00	; 0
 492:	69 f4       	brne	.+26     	; 0x4ae <dial+0xa0>
	{
		Timer1 = (waitTime*1000)/10;
 494:	88 ec       	ldi	r24, 0xC8	; 200
 496:	90 e0       	ldi	r25, 0x00	; 0
 498:	90 93 b3 02 	sts	0x02B3, r25
 49c:	80 93 b2 02 	sts	0x02B2, r24
		btnFlag = 1;
 4a0:	81 e0       	ldi	r24, 0x01	; 1
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	90 93 ad 02 	sts	0x02AD, r25
 4a8:	80 93 ac 02 	sts	0x02AC, r24
 4ac:	80 c0       	rjmp	.+256    	; 0x5ae <dial+0x1a0>
	}
	else if((PINA & 0x08) && btnFlag == 1)	//encoder button release
 4ae:	cb 9b       	sbis	0x19, 3	; 25
 4b0:	2a c0       	rjmp	.+84     	; 0x506 <dial+0xf8>
 4b2:	80 91 ac 02 	lds	r24, 0x02AC
 4b6:	90 91 ad 02 	lds	r25, 0x02AD
 4ba:	01 97       	sbiw	r24, 0x01	; 1
 4bc:	21 f5       	brne	.+72     	; 0x506 <dial+0xf8>
	{
		userInput[lcdPos] = asciiNum;
 4be:	80 91 ae 02 	lds	r24, 0x02AE
 4c2:	90 91 af 02 	lds	r25, 0x02AF
 4c6:	fc 01       	movw	r30, r24
 4c8:	e6 5b       	subi	r30, 0xB6	; 182
 4ca:	fc 4f       	sbci	r31, 0xFC	; 252
 4cc:	20 91 68 03 	lds	r18, 0x0368
 4d0:	20 83       	st	Z, r18
		//LCD_WriteData(asciiNum);
		lcdPos++;
 4d2:	01 96       	adiw	r24, 0x01	; 1
 4d4:	90 93 af 02 	sts	0x02AF, r25
 4d8:	80 93 ae 02 	sts	0x02AE, r24
		delay_ms(100);
 4dc:	84 e6       	ldi	r24, 0x64	; 100
 4de:	90 e0       	ldi	r25, 0x00	; 0
 4e0:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_ms>
		encoderCount = 0;
 4e4:	10 92 6c 03 	sts	0x036C, r1
 4e8:	10 92 6b 03 	sts	0x036B, r1
		LCD_clearLine(1);
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_clearLine>
		//encoderTmp = 0;

		btnFlag = 0;
 4f4:	10 92 ad 02 	sts	0x02AD, r1
 4f8:	10 92 ac 02 	sts	0x02AC, r1
		Timer1 = 0;
 4fc:	10 92 b3 02 	sts	0x02B3, r1
 500:	10 92 b2 02 	sts	0x02B2, r1
 504:	52 c0       	rjmp	.+164    	; 0x5aa <dial+0x19c>
	}
	else if(!(PINA & 0x08) && btnFlag == 1 && !Timer1)	//encoder button long press
 506:	cb 99       	sbic	0x19, 3	; 25
 508:	50 c0       	rjmp	.+160    	; 0x5aa <dial+0x19c>
 50a:	c0 91 ac 02 	lds	r28, 0x02AC
 50e:	d0 91 ad 02 	lds	r29, 0x02AD
 512:	c1 30       	cpi	r28, 0x01	; 1
 514:	d1 05       	cpc	r29, r1
 516:	09 f0       	breq	.+2      	; 0x51a <dial+0x10c>
 518:	48 c0       	rjmp	.+144    	; 0x5aa <dial+0x19c>
 51a:	80 91 b2 02 	lds	r24, 0x02B2
 51e:	90 91 b3 02 	lds	r25, 0x02B3
 522:	89 2b       	or	r24, r25
 524:	09 f0       	breq	.+2      	; 0x528 <dial+0x11a>
 526:	41 c0       	rjmp	.+130    	; 0x5aa <dial+0x19c>
	{
		userInput[lcdPos] = 'E';
 528:	e0 91 ae 02 	lds	r30, 0x02AE
 52c:	f0 91 af 02 	lds	r31, 0x02AF
 530:	e6 5b       	subi	r30, 0xB6	; 182
 532:	fc 4f       	sbci	r31, 0xFC	; 252
 534:	85 e4       	ldi	r24, 0x45	; 69
 536:	80 83       	st	Z, r24
 538:	8a e4       	ldi	r24, 0x4A	; 74
 53a:	e8 2e       	mov	r14, r24
 53c:	83 e0       	ldi	r24, 0x03	; 3
 53e:	f8 2e       	mov	r15, r24
		for(int i=0;i<lcdPos;i++)	//message display on scnd line
 540:	00 e0       	ldi	r16, 0x00	; 0
 542:	10 e0       	ldi	r17, 0x00	; 0
 544:	80 91 ae 02 	lds	r24, 0x02AE
 548:	90 91 af 02 	lds	r25, 0x02AF
 54c:	08 17       	cp	r16, r24
 54e:	19 07       	cpc	r17, r25
 550:	64 f4       	brge	.+24     	; 0x56a <dial+0x15c>
		{
			LCD_GoTo(i,1);
 552:	61 e0       	ldi	r22, 0x01	; 1
 554:	80 2f       	mov	r24, r16
 556:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GoTo>
			LCD_WriteData(userInput[i]);
 55a:	f7 01       	movw	r30, r14
 55c:	81 91       	ld	r24, Z+
 55e:	7f 01       	movw	r14, r30
 560:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_WriteData>
		Timer1 = 0;
	}
	else if(!(PINA & 0x08) && btnFlag == 1 && !Timer1)	//encoder button long press
	{
		userInput[lcdPos] = 'E';
		for(int i=0;i<lcdPos;i++)	//message display on scnd line
 564:	0f 5f       	subi	r16, 0xFF	; 255
 566:	1f 4f       	sbci	r17, 0xFF	; 255
 568:	ed cf       	rjmp	.-38     	; 0x544 <dial+0x136>
			LCD_GoTo(i,1);
			LCD_WriteData(userInput[i]);
		}
		//messageDisplay();

		LCD_WriteData(lcdPos+48);	//message length display
 56a:	80 5d       	subi	r24, 0xD0	; 208
 56c:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_WriteData>

		LCD_clearLine(0);
 570:	80 e0       	ldi	r24, 0x00	; 0
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_clearLine>
		btnFlag = 0;
 578:	10 92 ad 02 	sts	0x02AD, r1
 57c:	10 92 ac 02 	sts	0x02AC, r1
		delay_ms(1000);
 580:	88 ee       	ldi	r24, 0xE8	; 232
 582:	93 e0       	ldi	r25, 0x03	; 3
 584:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_ms>
		broadcast(500,lcdPos);
 588:	60 91 ae 02 	lds	r22, 0x02AE
 58c:	70 91 af 02 	lds	r23, 0x02AF
 590:	84 ef       	ldi	r24, 0xF4	; 244
 592:	91 e0       	ldi	r25, 0x01	; 1
 594:	0e 94 46 01 	call	0x28c	; 0x28c <broadcast>
		lcdPos=0;
 598:	10 92 af 02 	sts	0x02AF, r1
 59c:	10 92 ae 02 	sts	0x02AE, r1
		delay_ms(700);
 5a0:	8c eb       	ldi	r24, 0xBC	; 188
 5a2:	92 e0       	ldi	r25, 0x02	; 2
 5a4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_ms>
		return 1;
 5a8:	02 c0       	rjmp	.+4      	; 0x5ae <dial+0x1a0>
	}
return 0;
 5aa:	c0 e0       	ldi	r28, 0x00	; 0
 5ac:	d0 e0       	ldi	r29, 0x00	; 0
}
 5ae:	ce 01       	movw	r24, r28
 5b0:	df 91       	pop	r29
 5b2:	cf 91       	pop	r28
 5b4:	1f 91       	pop	r17
 5b6:	0f 91       	pop	r16
 5b8:	ff 90       	pop	r15
 5ba:	ef 90       	pop	r14
 5bc:	08 95       	ret

000005be <messageDecrypt>:

}

int messageDecrypt()
{
	LCD_GoTo(lcdPos,1);
 5be:	61 e0       	ldi	r22, 0x01	; 1
 5c0:	80 91 ae 02 	lds	r24, 0x02AE
 5c4:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GoTo>
	LCD_WriteData(94);			//strzalka
 5c8:	8e e5       	ldi	r24, 0x5E	; 94
 5ca:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_WriteData>

	if(!(PINC & 0x02))			//dash
 5ce:	99 99       	sbic	0x13, 1	; 19
 5d0:	20 c0       	rjmp	.+64     	; 0x612 <messageDecrypt+0x54>
	{
	LCD_clearLine(1);
 5d2:	81 e0       	ldi	r24, 0x01	; 1
 5d4:	90 e0       	ldi	r25, 0x00	; 0
 5d6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_clearLine>
	delay_ms(400);
 5da:	80 e9       	ldi	r24, 0x90	; 144
 5dc:	91 e0       	ldi	r25, 0x01	; 1
 5de:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_ms>
	LCD_GoTo(lcdPos,0);
 5e2:	60 e0       	ldi	r22, 0x00	; 0
 5e4:	80 91 ae 02 	lds	r24, 0x02AE
 5e8:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GoTo>
	LCD_WriteData(45);	// "-"
 5ec:	8d e2       	ldi	r24, 0x2D	; 45
 5ee:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_WriteData>
	morseDecode[lcdPos] = 0;
 5f2:	80 91 ae 02 	lds	r24, 0x02AE
 5f6:	90 91 af 02 	lds	r25, 0x02AF
 5fa:	fc 01       	movw	r30, r24
 5fc:	ee 0f       	add	r30, r30
 5fe:	ff 1f       	adc	r31, r31
 600:	ee 52       	subi	r30, 0x2E	; 46
 602:	fd 4f       	sbci	r31, 0xFD	; 253
 604:	11 82       	std	Z+1, r1	; 0x01
 606:	10 82       	st	Z, r1
	lcdPos++;
 608:	01 96       	adiw	r24, 0x01	; 1
 60a:	90 93 af 02 	sts	0x02AF, r25
 60e:	80 93 ae 02 	sts	0x02AE, r24
	}
	if(!(PINC & 0x04))			//dot
 612:	9a 99       	sbic	0x13, 2	; 19
 614:	22 c0       	rjmp	.+68     	; 0x65a <messageDecrypt+0x9c>
	{
	LCD_clearLine(1);
 616:	81 e0       	ldi	r24, 0x01	; 1
 618:	90 e0       	ldi	r25, 0x00	; 0
 61a:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_clearLine>
	delay_ms(400);
 61e:	80 e9       	ldi	r24, 0x90	; 144
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_ms>
	LCD_GoTo(lcdPos,0);
 626:	60 e0       	ldi	r22, 0x00	; 0
 628:	80 91 ae 02 	lds	r24, 0x02AE
 62c:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GoTo>
	LCD_WriteData(46);	// "."
 630:	8e e2       	ldi	r24, 0x2E	; 46
 632:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_WriteData>
	morseDecode[lcdPos] = 1;
 636:	80 91 ae 02 	lds	r24, 0x02AE
 63a:	90 91 af 02 	lds	r25, 0x02AF
 63e:	fc 01       	movw	r30, r24
 640:	ee 0f       	add	r30, r30
 642:	ff 1f       	adc	r31, r31
 644:	ee 52       	subi	r30, 0x2E	; 46
 646:	fd 4f       	sbci	r31, 0xFD	; 253
 648:	21 e0       	ldi	r18, 0x01	; 1
 64a:	30 e0       	ldi	r19, 0x00	; 0
 64c:	31 83       	std	Z+1, r19	; 0x01
 64e:	20 83       	st	Z, r18
	lcdPos++;
 650:	01 96       	adiw	r24, 0x01	; 1
 652:	90 93 af 02 	sts	0x02AF, r25
 656:	80 93 ae 02 	sts	0x02AE, r24
	}

	if(!(PINC & 0x04) && !(PINC & 0x02)) 	//powrot do menu
 65a:	9a 99       	sbic	0x13, 2	; 19
 65c:	1b c0       	rjmp	.+54     	; 0x694 <messageDecrypt+0xd6>
 65e:	99 99       	sbic	0x13, 1	; 19
 660:	19 c0       	rjmp	.+50     	; 0x694 <messageDecrypt+0xd6>
	{
	delay_ms(500);
 662:	84 ef       	ldi	r24, 0xF4	; 244
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_ms>
	morseDecode[lcdPos] = 2;
 66a:	e0 91 ae 02 	lds	r30, 0x02AE
 66e:	f0 91 af 02 	lds	r31, 0x02AF
 672:	ee 0f       	add	r30, r30
 674:	ff 1f       	adc	r31, r31
 676:	ee 52       	subi	r30, 0x2E	; 46
 678:	fd 4f       	sbci	r31, 0xFD	; 253
 67a:	82 e0       	ldi	r24, 0x02	; 2
 67c:	90 e0       	ldi	r25, 0x00	; 0
 67e:	91 83       	std	Z+1, r25	; 0x01
 680:	80 83       	st	Z, r24
	lcdPos = 0;
 682:	10 92 af 02 	sts	0x02AF, r1
 686:	10 92 ae 02 	sts	0x02AE, r1
	LCD_Clear();
 68a:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Clear>
	return 1;
 68e:	81 e0       	ldi	r24, 0x01	; 1
 690:	90 e0       	ldi	r25, 0x00	; 0
 692:	08 95       	ret
	}

	if (!(PINA & 0x08))			//encoder push - decode message
 694:	cb 99       	sbic	0x19, 3	; 25
 696:	08 c0       	rjmp	.+16     	; 0x6a8 <messageDecrypt+0xea>
	{
	delay_ms(500);
 698:	84 ef       	ldi	r24, 0xF4	; 244
 69a:	91 e0       	ldi	r25, 0x01	; 1
 69c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_ms>
	lcdPos = 0;
 6a0:	10 92 af 02 	sts	0x02AF, r1
 6a4:	10 92 ae 02 	sts	0x02AE, r1

			//}

		//}
	}
return 0;}
 6a8:	80 e0       	ldi	r24, 0x00	; 0
 6aa:	90 e0       	ldi	r25, 0x00	; 0
 6ac:	08 95       	ret

000006ae <messageDisplay>:

void messageDisplay()
{
 6ae:	ef 92       	push	r14
 6b0:	ff 92       	push	r15
 6b2:	0f 93       	push	r16
 6b4:	1f 93       	push	r17
 6b6:	cf 93       	push	r28
 6b8:	df 93       	push	r29
	LCD_clearLine(0);
 6ba:	80 e0       	ldi	r24, 0x00	; 0
 6bc:	90 e0       	ldi	r25, 0x00	; 0
 6be:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_clearLine>
	LCD_clearLine(1);
 6c2:	81 e0       	ldi	r24, 0x01	; 1
 6c4:	90 e0       	ldi	r25, 0x00	; 0
 6c6:	0e 94 ff 01 	call	0x3fe	; 0x3fe <LCD_clearLine>
	/*for(int i=0;i<15;i++)	//message display on scnd line
	{
		LCD_GoTo(i,1);
		LCD_WriteData(userInput[i]);
	}*/
	if(userInput[0] < 97 || userInput[0] > 122)
 6ca:	80 91 4a 03 	lds	r24, 0x034A
 6ce:	81 56       	subi	r24, 0x61	; 97
 6d0:	8a 31       	cpi	r24, 0x1A	; 26
 6d2:	20 f4       	brcc	.+8      	; 0x6dc <messageDisplay+0x2e>
 6d4:	ce e0       	ldi	r28, 0x0E	; 14
 6d6:	d3 e0       	ldi	r29, 0x03	; 3
 6d8:	10 e0       	ldi	r17, 0x00	; 0
 6da:	14 c0       	rjmp	.+40     	; 0x704 <messageDisplay+0x56>
	{
		LCD_Home();
 6dc:	0e 94 94 00 	call	0x128	; 0x128 <LCD_Home>
		LCD_WriteText("brak");
 6e0:	8d e9       	ldi	r24, 0x9D	; 157
 6e2:	92 e0       	ldi	r25, 0x02	; 2
 6e4:	0e 94 77 00 	call	0xee	; 0xee <LCD_WriteText>
		LCD_GoTo(0,1);
 6e8:	61 e0       	ldi	r22, 0x01	; 1
 6ea:	80 e0       	ldi	r24, 0x00	; 0
 6ec:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GoTo>
		LCD_WriteText("danych");
 6f0:	82 ea       	ldi	r24, 0xA2	; 162
 6f2:	92 e0       	ldi	r25, 0x02	; 2
	/*for(int i=0;i<15;i++)	//message display on scnd line
	{
		LCD_GoTo(i,0);
		LCD_WriteData(morseInput[i]+48);
	}*/
}
 6f4:	df 91       	pop	r29
 6f6:	cf 91       	pop	r28
 6f8:	1f 91       	pop	r17
 6fa:	0f 91       	pop	r16
 6fc:	ff 90       	pop	r15
 6fe:	ef 90       	pop	r14
	if(userInput[0] < 97 || userInput[0] > 122)
	{
		LCD_Home();
		LCD_WriteText("brak");
		LCD_GoTo(0,1);
		LCD_WriteText("danych");
 700:	0c 94 77 00 	jmp	0xee	; 0xee <LCD_WriteText>
 704:	7e 01       	movw	r14, r28
		return;
	}

	int j = 0;
	while(morseInput[j] != 2)
 706:	88 81       	ld	r24, Y
 708:	99 81       	ldd	r25, Y+1	; 0x01
 70a:	02 97       	sbiw	r24, 0x02	; 2
 70c:	61 f0       	breq	.+24     	; 0x726 <messageDisplay+0x78>
	{
		LCD_GoTo(j,0);
 70e:	60 e0       	ldi	r22, 0x00	; 0
 710:	81 2f       	mov	r24, r17
 712:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GoTo>
 716:	22 96       	adiw	r28, 0x02	; 2
		LCD_WriteData(morseInput[j]+48);
 718:	f7 01       	movw	r30, r14
 71a:	80 81       	ld	r24, Z
 71c:	80 5d       	subi	r24, 0xD0	; 208
 71e:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_WriteData>
 722:	1f 5f       	subi	r17, 0xFF	; 255
 724:	ef cf       	rjmp	.-34     	; 0x704 <messageDisplay+0x56>
 726:	8a e4       	ldi	r24, 0x4A	; 74
 728:	e8 2e       	mov	r14, r24
 72a:	83 e0       	ldi	r24, 0x03	; 3
 72c:	f8 2e       	mov	r15, r24
		LCD_WriteText("danych");
		return;
	}

	int j = 0;
	while(morseInput[j] != 2)
 72e:	e7 01       	movw	r28, r14
 730:	8e 01       	movw	r16, r28
		LCD_GoTo(j,0);
		LCD_WriteData(morseInput[j]+48);
		j++;
	}
	int k = 0;
	while(userInput[k] != 'E')
 732:	88 81       	ld	r24, Y
 734:	85 34       	cpi	r24, 0x45	; 69
 736:	59 f0       	breq	.+22     	; 0x74e <messageDisplay+0xa0>
	{
		LCD_GoTo(k,1);
 738:	61 e0       	ldi	r22, 0x01	; 1
 73a:	8c 2f       	mov	r24, r28
 73c:	8e 19       	sub	r24, r14
 73e:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GoTo>
 742:	21 96       	adiw	r28, 0x01	; 1
		LCD_WriteData(userInput[k]);
 744:	f8 01       	movw	r30, r16
 746:	80 81       	ld	r24, Z
 748:	0e 94 74 00 	call	0xe8	; 0xe8 <LCD_WriteData>
 74c:	f1 cf       	rjmp	.-30     	; 0x730 <messageDisplay+0x82>
	/*for(int i=0;i<15;i++)	//message display on scnd line
	{
		LCD_GoTo(i,0);
		LCD_WriteData(morseInput[i]+48);
	}*/
}
 74e:	df 91       	pop	r29
 750:	cf 91       	pop	r28
 752:	1f 91       	pop	r17
 754:	0f 91       	pop	r16
 756:	ff 90       	pop	r15
 758:	ef 90       	pop	r14
 75a:	08 95       	ret

0000075c <isButton>:
		LCD_WriteText("        ");
}

int isButton()
{
	if(!(PINA & 0x08))
 75c:	89 b3       	in	r24, 0x19	; 25
 75e:	86 95       	lsr	r24
 760:	86 95       	lsr	r24
 762:	86 95       	lsr	r24
 764:	91 e0       	ldi	r25, 0x01	; 1
 766:	89 27       	eor	r24, r25
		return 1;
	else
		return 0;
}
 768:	81 70       	andi	r24, 0x01	; 1
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	08 95       	ret

0000076e <readEncoder>:

uint8_t readEncoder(void)
{
 uint8_t val=0;

  if(!bit_is_clear(PINA, PA2))
 76e:	ca 9b       	sbis	0x19, 2	; 25
 770:	02 c0       	rjmp	.+4      	; 0x776 <readEncoder+0x8>
	val |= (1<<1);
 772:	82 e0       	ldi	r24, 0x02	; 2
 774:	01 c0       	rjmp	.+2      	; 0x778 <readEncoder+0xa>
		return 0;
}

uint8_t readEncoder(void)
{
 uint8_t val=0;
 776:	80 e0       	ldi	r24, 0x00	; 0

  if(!bit_is_clear(PINA, PA2))
	val |= (1<<1);

  if(!bit_is_clear(PINA, PA1))
 778:	c9 99       	sbic	0x19, 1	; 25
	val |= (1<<0);
 77a:	81 60       	ori	r24, 0x01	; 1

  return val;
}
 77c:	08 95       	ret

0000077e <initializeSetup>:
  //0 - dot, 1 - dash, 2 - end
};

void initializeSetup (void)		//initializing registers//
{
	 MCUCSR = (1<<JTD);		//disabling JTAG
 77e:	80 e8       	ldi	r24, 0x80	; 128
 780:	84 bf       	out	0x34, r24	; 52
	 MCUCSR = (1<<JTD);
 782:	84 bf       	out	0x34, r24	; 52

	TCCR2 |= (1<<WGM21);		//work mode CTC
 784:	95 b5       	in	r25, 0x25	; 37
 786:	98 60       	ori	r25, 0x08	; 8
 788:	95 bd       	out	0x25, r25	; 37
	TCCR2 |= (1<<CS22)|(1<<CS21)|(1<<CS20);	//prescaler = 1024
 78a:	95 b5       	in	r25, 0x25	; 37
 78c:	97 60       	ori	r25, 0x07	; 7
 78e:	95 bd       	out	0x25, r25	; 37
	OCR2  = 4;				//comparison interrupt every 10ms (100Hz)
 790:	94 e0       	ldi	r25, 0x04	; 4
 792:	93 bd       	out	0x23, r25	; 35
	TIMSK = (1<<OCIE2);			//interrupt unlock CompareMatch
 794:	89 bf       	out	0x39, r24	; 57
	/*DDRD &=~ (1 << PD4);
	DDRD &=~ (1 << PD5);	// encoder pins as input
	PORTD |= (1 << PD5)		// with pull-up enabled
			|(1 << PD4);*/

		DDRA &=~ (1 << PA1);
 796:	d1 98       	cbi	0x1a, 1	; 26
		DDRA &=~ (1 << PA2);	// encoder pins as input
 798:	d2 98       	cbi	0x1a, 2	; 26
		PORTA |= (1 << PA2)		// with pull-up enabled
 79a:	8b b3       	in	r24, 0x1b	; 27
 79c:	86 60       	ori	r24, 0x06	; 6
 79e:	8b bb       	out	0x1b, r24	; 27
				|(1 << PA1);

	//DDRA |= (1<<PA0);			//signal LED as output
		DDRC |= (1<<PC4);
 7a0:	a4 9a       	sbi	0x14, 4	; 20
	//DDRB |= (0<<PB1); 			//encoder button pin as input
		DDRA |= (0<<PA3);
 7a2:	8a b3       	in	r24, 0x1a	; 26
 7a4:	8a bb       	out	0x1a, r24	; 26
	//DDRB |= (0<<PB2);	//sw 1 in
	//DDRB |= (0<<PB3);	//sw 2 in
		DDRC |= (0<<PC1);	//sw 1 in
 7a6:	84 b3       	in	r24, 0x14	; 20
 7a8:	84 bb       	out	0x14, r24	; 20
		DDRC |= (0<<PC2);	//sw 2 in
 7aa:	84 b3       	in	r24, 0x14	; 20
 7ac:	84 bb       	out	0x14, r24	; 20

	LCD_Initalize();
 7ae:	0e 94 9e 00 	call	0x13c	; 0x13c <LCD_Initalize>
	val = readEncoder();
 7b2:	0e 94 b7 03 	call	0x76e	; 0x76e <readEncoder>
 7b6:	80 93 6a 03 	sts	0x036A, r24
	sei();
 7ba:	78 94       	sei
 7bc:	08 95       	ret

000007be <readEncoderCounter>:
}

void readEncoderCounter ()	//monitoring increase
{												//or decrease //
	uint8_t val_tmp = 0;						//returning 1 if +
	val_tmp = readEncoder();			//			0 if -
 7be:	0e 94 b7 03 	call	0x76e	; 0x76e <readEncoder>

	if(val != val_tmp)
 7c2:	90 91 6a 03 	lds	r25, 0x036A
 7c6:	98 17       	cp	r25, r24
 7c8:	d9 f0       	breq	.+54     	; 0x800 <readEncoderCounter+0x42>
	{
		if((val==3 && val_tmp==1) //||
 7ca:	93 30       	cpi	r25, 0x03	; 3
 7cc:	49 f4       	brne	.+18     	; 0x7e0 <readEncoderCounter+0x22>
 7ce:	81 30       	cpi	r24, 0x01	; 1
 7d0:	a9 f4       	brne	.+42     	; 0x7fc <readEncoderCounter+0x3e>
		//(val==0 && val_tmp==2)
		)
			{
			encoderCount ++;	//clockwise turn
 7d2:	20 91 6b 03 	lds	r18, 0x036B
 7d6:	30 91 6c 03 	lds	r19, 0x036C
 7da:	2f 5f       	subi	r18, 0xFF	; 255
 7dc:	3f 4f       	sbci	r19, 0xFF	; 255
 7de:	0a c0       	rjmp	.+20     	; 0x7f4 <readEncoderCounter+0x36>
			}
		else if((val==2 && val_tmp==0) //||
 7e0:	92 30       	cpi	r25, 0x02	; 2
 7e2:	61 f4       	brne	.+24     	; 0x7fc <readEncoderCounter+0x3e>
 7e4:	81 11       	cpse	r24, r1
 7e6:	0a c0       	rjmp	.+20     	; 0x7fc <readEncoderCounter+0x3e>
		//(val==1 && val_tmp==3)
		)
			{
			encoderCount --;	//counter-clockwise turn
 7e8:	20 91 6b 03 	lds	r18, 0x036B
 7ec:	30 91 6c 03 	lds	r19, 0x036C
 7f0:	21 50       	subi	r18, 0x01	; 1
 7f2:	31 09       	sbc	r19, r1
 7f4:	30 93 6c 03 	sts	0x036C, r19
 7f8:	20 93 6b 03 	sts	0x036B, r18
			}
		val = val_tmp;
 7fc:	80 93 6a 03 	sts	0x036A, r24
		}

	delay_ms(1);
 800:	81 e0       	ldi	r24, 0x01	; 1
 802:	90 e0       	ldi	r25, 0x00	; 0
 804:	0c 94 dc 00 	jmp	0x1b8	; 0x1b8 <delay_ms>

00000808 <__vector_4>:
}

ISR(TIMER2_COMP_vect)
{
 808:	1f 92       	push	r1
 80a:	0f 92       	push	r0
 80c:	0f b6       	in	r0, 0x3f	; 63
 80e:	0f 92       	push	r0
 810:	11 24       	eor	r1, r1
 812:	8f 93       	push	r24
 814:	9f 93       	push	r25
	uint16_t n;

	n = Timer1;		//100Hz Timer1
 816:	80 91 b2 02 	lds	r24, 0x02B2
 81a:	90 91 b3 02 	lds	r25, 0x02B3
	if (n) Timer1 = --n;
 81e:	00 97       	sbiw	r24, 0x00	; 0
 820:	29 f0       	breq	.+10     	; 0x82c <__vector_4+0x24>
 822:	01 97       	sbiw	r24, 0x01	; 1
 824:	90 93 b3 02 	sts	0x02B3, r25
 828:	80 93 b2 02 	sts	0x02B2, r24
	n = Timer2;		//100Hz Timer2
 82c:	80 91 b0 02 	lds	r24, 0x02B0
 830:	90 91 b1 02 	lds	r25, 0x02B1
	if (n) Timer2 = --n;
 834:	00 97       	sbiw	r24, 0x00	; 0
 836:	29 f0       	breq	.+10     	; 0x842 <__vector_4+0x3a>
 838:	01 97       	sbiw	r24, 0x01	; 1
 83a:	90 93 b1 02 	sts	0x02B1, r25
 83e:	80 93 b0 02 	sts	0x02B0, r24
}
 842:	9f 91       	pop	r25
 844:	8f 91       	pop	r24
 846:	0f 90       	pop	r0
 848:	0f be       	out	0x3f, r0	; 63
 84a:	0f 90       	pop	r0
 84c:	1f 90       	pop	r1
 84e:	18 95       	reti

00000850 <main>:
{
	int menu = 0;
	int btn = 0;
	int menuEnc = 0;

	initializeSetup();
 850:	0e 94 bf 03 	call	0x77e	; 0x77e <initializeSetup>
// git test 2
int main(void)
{
	int menu = 0;
	int btn = 0;
	int menuEnc = 0;
 854:	e1 2c       	mov	r14, r1
 856:	f1 2c       	mov	r15, r1
#include "morse.h"
// git test 2
int main(void)
{
	int menu = 0;
	int btn = 0;
 858:	00 e0       	ldi	r16, 0x00	; 0
 85a:	10 e0       	ldi	r17, 0x00	; 0
#include "morse.h"
// git test 2
int main(void)
{
	int menu = 0;
 85c:	c0 e0       	ldi	r28, 0x00	; 0
 85e:	d0 e0       	ldi	r29, 0x00	; 0
		/*if(menuEnc < 0) menuEnc = 0;
		else if(menuEnc > 2) menuEnc = 2;
		else
			menuEnc = encoderCount;*/
		if(encoderCount < 0) encoderCount = 0;
		if(encoderCount > 2) encoderCount = 2;
 860:	82 e0       	ldi	r24, 0x02	; 2
 862:	c8 2e       	mov	r12, r24
 864:	d1 2c       	mov	r13, r1

	initializeSetup();

	while(1)
	{
	readEncoderCounter();
 866:	0e 94 df 03 	call	0x7be	; 0x7be <readEncoderCounter>

	if(btn == 0)
 86a:	01 15       	cp	r16, r1
 86c:	11 05       	cpc	r17, r1
 86e:	c1 f4       	brne	.+48     	; 0x8a0 <__stack+0x41>
	{
		/*if(menuEnc < 0) menuEnc = 0;
		else if(menuEnc > 2) menuEnc = 2;
		else
			menuEnc = encoderCount;*/
		if(encoderCount < 0) encoderCount = 0;
 870:	80 91 6b 03 	lds	r24, 0x036B
 874:	90 91 6c 03 	lds	r25, 0x036C
 878:	97 ff       	sbrs	r25, 7
 87a:	04 c0       	rjmp	.+8      	; 0x884 <__stack+0x25>
 87c:	10 92 6c 03 	sts	0x036C, r1
 880:	10 92 6b 03 	sts	0x036B, r1
		if(encoderCount > 2) encoderCount = 2;
 884:	80 91 6b 03 	lds	r24, 0x036B
 888:	90 91 6c 03 	lds	r25, 0x036C
 88c:	03 97       	sbiw	r24, 0x03	; 3
 88e:	24 f0       	brlt	.+8      	; 0x898 <__stack+0x39>
 890:	d0 92 6c 03 	sts	0x036C, r13
 894:	c0 92 6b 03 	sts	0x036B, r12
		menuEnc = encoderCount;
 898:	e0 90 6b 03 	lds	r14, 0x036B
 89c:	f0 90 6c 03 	lds	r15, 0x036C
	}

	if(menu == 0)
 8a0:	cd 2b       	or	r28, r29
 8a2:	89 f4       	brne	.+34     	; 0x8c6 <__stack+0x67>
	{
		LCD_Home();
 8a4:	0e 94 94 00 	call	0x128	; 0x128 <LCD_Home>
		LCD_WriteText("Opcje:  ");
 8a8:	87 e6       	ldi	r24, 0x67	; 103
 8aa:	92 e0       	ldi	r25, 0x02	; 2
 8ac:	0e 94 77 00 	call	0xee	; 0xee <LCD_WriteText>
		LCD_GoTo(0,1);
 8b0:	61 e0       	ldi	r22, 0x01	; 1
 8b2:	80 e0       	ldi	r24, 0x00	; 0
 8b4:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GoTo>
		LCD_WriteText("Nadaj   ");
 8b8:	80 e7       	ldi	r24, 0x70	; 112
 8ba:	92 e0       	ldi	r25, 0x02	; 2
 8bc:	0e 94 77 00 	call	0xee	; 0xee <LCD_WriteText>
 8c0:	c1 e0       	ldi	r28, 0x01	; 1
 8c2:	d0 e0       	ldi	r29, 0x00	; 0
 8c4:	d0 cf       	rjmp	.-96     	; 0x866 <__stack+0x7>
		menu=1;
	}
	else if(menu ==1)
	{
		switch (menuEnc)
 8c6:	81 e0       	ldi	r24, 0x01	; 1
 8c8:	e8 16       	cp	r14, r24
 8ca:	f1 04       	cpc	r15, r1
 8cc:	81 f1       	breq	.+96     	; 0x92e <__stack+0xcf>
 8ce:	82 e0       	ldi	r24, 0x02	; 2
 8d0:	e8 16       	cp	r14, r24
 8d2:	f1 04       	cpc	r15, r1
 8d4:	09 f4       	brne	.+2      	; 0x8d8 <__stack+0x79>
 8d6:	52 c0       	rjmp	.+164    	; 0x97c <__stack+0x11d>
 8d8:	e1 14       	cp	r14, r1
 8da:	f1 04       	cpc	r15, r1
 8dc:	89 f7       	brne	.-30     	; 0x8c0 <__stack+0x61>
		{
		case 0:
		if(btn == 0)
 8de:	01 15       	cp	r16, r1
 8e0:	11 05       	cpc	r17, r1
 8e2:	d1 f4       	brne	.+52     	; 0x918 <__stack+0xb9>
		{
		LCD_GoTo(0,1);
 8e4:	61 e0       	ldi	r22, 0x01	; 1
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GoTo>
		LCD_WriteText("nadaj   ");
 8ec:	89 e7       	ldi	r24, 0x79	; 121
 8ee:	92 e0       	ldi	r25, 0x02	; 2
 8f0:	0e 94 77 00 	call	0xee	; 0xee <LCD_WriteText>

			if(isButton())
 8f4:	0e 94 ae 03 	call	0x75c	; 0x75c <isButton>
 8f8:	89 2b       	or	r24, r25
 8fa:	11 f3       	breq	.-60     	; 0x8c0 <__stack+0x61>
			{
				btn = 1;
				LCD_Clear();
 8fc:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Clear>
				encoderCount=0;
 900:	10 92 6c 03 	sts	0x036C, r1
 904:	10 92 6b 03 	sts	0x036B, r1
				delay_ms(800);
 908:	80 e2       	ldi	r24, 0x20	; 32
 90a:	93 e0       	ldi	r25, 0x03	; 3
 90c:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_ms>
				LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
 910:	8c e0       	ldi	r24, 0x0C	; 12
 912:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
 916:	03 c0       	rjmp	.+6      	; 0x91e <__stack+0xbf>
			}
		}
			if(btn == 1)
 918:	01 30       	cpi	r16, 0x01	; 1
 91a:	11 05       	cpc	r17, r1
 91c:	89 f6       	brne	.-94     	; 0x8c0 <__stack+0x61>
			{
				if(dial())
 91e:	0e 94 07 02 	call	0x40e	; 0x40e <dial>
 922:	89 2b       	or	r24, r25
 924:	09 f0       	breq	.+2      	; 0x928 <__stack+0xc9>
 926:	50 c0       	rjmp	.+160    	; 0x9c8 <__stack+0x169>
 928:	01 e0       	ldi	r16, 0x01	; 1
 92a:	10 e0       	ldi	r17, 0x00	; 0
 92c:	c9 cf       	rjmp	.-110    	; 0x8c0 <__stack+0x61>
				}
			}
		break;

		case 1:
		if(btn == 0)
 92e:	01 15       	cp	r16, r1
 930:	11 05       	cpc	r17, r1
 932:	b9 f4       	brne	.+46     	; 0x962 <__stack+0x103>
		{
		LCD_GoTo(0,1);
 934:	61 e0       	ldi	r22, 0x01	; 1
 936:	80 e0       	ldi	r24, 0x00	; 0
 938:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GoTo>
		LCD_WriteText("wyswietl");
 93c:	82 e8       	ldi	r24, 0x82	; 130
 93e:	92 e0       	ldi	r25, 0x02	; 2
 940:	0e 94 77 00 	call	0xee	; 0xee <LCD_WriteText>

			if(isButton())
 944:	0e 94 ae 03 	call	0x75c	; 0x75c <isButton>
 948:	89 2b       	or	r24, r25
 94a:	09 f4       	brne	.+2      	; 0x94e <__stack+0xef>
 94c:	b9 cf       	rjmp	.-142    	; 0x8c0 <__stack+0x61>
			{
			btn = 2;
			delay_ms(1000);
 94e:	88 ee       	ldi	r24, 0xE8	; 232
 950:	93 e0       	ldi	r25, 0x03	; 3
 952:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_ms>
			messageDisplay();
 956:	0e 94 57 03 	call	0x6ae	; 0x6ae <messageDisplay>
			LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
 95a:	8c e0       	ldi	r24, 0x0C	; 12
 95c:	0e 94 71 00 	call	0xe2	; 0xe2 <LCD_WriteCommand>
 960:	04 c0       	rjmp	.+8      	; 0x96a <__stack+0x10b>
			}
		}
		if(btn == 2)
 962:	02 30       	cpi	r16, 0x02	; 2
 964:	11 05       	cpc	r17, r1
 966:	09 f0       	breq	.+2      	; 0x96a <__stack+0x10b>
 968:	ab cf       	rjmp	.-170    	; 0x8c0 <__stack+0x61>
		{
		LCD_moveMode();
 96a:	0e 94 28 01 	call	0x250	; 0x250 <LCD_moveMode>

			if(isButton())
 96e:	0e 94 ae 03 	call	0x75c	; 0x75c <isButton>
 972:	89 2b       	or	r24, r25
 974:	29 f5       	brne	.+74     	; 0x9c0 <__stack+0x161>
 976:	02 e0       	ldi	r16, 0x02	; 2
 978:	10 e0       	ldi	r17, 0x00	; 0
 97a:	a2 cf       	rjmp	.-188    	; 0x8c0 <__stack+0x61>
			}
		}
		break;

			case 2:
			if(btn == 0)
 97c:	01 15       	cp	r16, r1
 97e:	11 05       	cpc	r17, r1
 980:	a1 f4       	brne	.+40     	; 0x9aa <__stack+0x14b>
			{
			LCD_GoTo(0,1);
 982:	61 e0       	ldi	r22, 0x01	; 1
 984:	80 e0       	ldi	r24, 0x00	; 0
 986:	0e 94 83 00 	call	0x106	; 0x106 <LCD_GoTo>
			LCD_WriteText("rozszyf.");
 98a:	8b e8       	ldi	r24, 0x8B	; 139
 98c:	92 e0       	ldi	r25, 0x02	; 2
 98e:	0e 94 77 00 	call	0xee	; 0xee <LCD_WriteText>

				if(isButton())
 992:	0e 94 ae 03 	call	0x75c	; 0x75c <isButton>
 996:	89 2b       	or	r24, r25
 998:	09 f4       	brne	.+2      	; 0x99c <__stack+0x13d>
 99a:	92 cf       	rjmp	.-220    	; 0x8c0 <__stack+0x61>
				{
				btn = 3;
				LCD_Clear();
 99c:	0e 94 8a 00 	call	0x114	; 0x114 <LCD_Clear>
				delay_ms(1000);
 9a0:	88 ee       	ldi	r24, 0xE8	; 232
 9a2:	93 e0       	ldi	r25, 0x03	; 3
 9a4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_ms>
 9a8:	04 c0       	rjmp	.+8      	; 0x9b2 <__stack+0x153>
				//LCD_WriteCommand(HD44780_DISPLAY_ONOFF | HD44780_DISPLAY_ON | HD44780_CURSOR_OFF | HD44780_CURSOR_NOBLINK);
				}
			}
			if(btn == 3)
 9aa:	03 30       	cpi	r16, 0x03	; 3
 9ac:	11 05       	cpc	r17, r1
 9ae:	09 f0       	breq	.+2      	; 0x9b2 <__stack+0x153>
 9b0:	87 cf       	rjmp	.-242    	; 0x8c0 <__stack+0x61>
			{
				if(messageDecrypt())
 9b2:	0e 94 df 02 	call	0x5be	; 0x5be <messageDecrypt>
 9b6:	89 2b       	or	r24, r25
 9b8:	19 f4       	brne	.+6      	; 0x9c0 <__stack+0x161>
 9ba:	03 e0       	ldi	r16, 0x03	; 3
 9bc:	10 e0       	ldi	r17, 0x00	; 0
 9be:	80 cf       	rjmp	.-256    	; 0x8c0 <__stack+0x61>
				{
				delay_ms(500);
 9c0:	84 ef       	ldi	r24, 0xF4	; 244
 9c2:	91 e0       	ldi	r25, 0x01	; 1
 9c4:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <delay_ms>
				btn = 0;
 9c8:	00 e0       	ldi	r16, 0x00	; 0
 9ca:	10 e0       	ldi	r17, 0x00	; 0
				menu = 0;
 9cc:	c0 e0       	ldi	r28, 0x00	; 0
 9ce:	d0 e0       	ldi	r29, 0x00	; 0
 9d0:	4a cf       	rjmp	.-364    	; 0x866 <__stack+0x7>

000009d2 <__divmodhi4>:
 9d2:	97 fb       	bst	r25, 7
 9d4:	07 2e       	mov	r0, r23
 9d6:	16 f4       	brtc	.+4      	; 0x9dc <__divmodhi4+0xa>
 9d8:	00 94       	com	r0
 9da:	07 d0       	rcall	.+14     	; 0x9ea <__divmodhi4_neg1>
 9dc:	77 fd       	sbrc	r23, 7
 9de:	09 d0       	rcall	.+18     	; 0x9f2 <__divmodhi4_neg2>
 9e0:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__udivmodhi4>
 9e4:	07 fc       	sbrc	r0, 7
 9e6:	05 d0       	rcall	.+10     	; 0x9f2 <__divmodhi4_neg2>
 9e8:	3e f4       	brtc	.+14     	; 0x9f8 <__divmodhi4_exit>

000009ea <__divmodhi4_neg1>:
 9ea:	90 95       	com	r25
 9ec:	81 95       	neg	r24
 9ee:	9f 4f       	sbci	r25, 0xFF	; 255
 9f0:	08 95       	ret

000009f2 <__divmodhi4_neg2>:
 9f2:	70 95       	com	r23
 9f4:	61 95       	neg	r22
 9f6:	7f 4f       	sbci	r23, 0xFF	; 255

000009f8 <__divmodhi4_exit>:
 9f8:	08 95       	ret

000009fa <__udivmodhi4>:
 9fa:	aa 1b       	sub	r26, r26
 9fc:	bb 1b       	sub	r27, r27
 9fe:	51 e1       	ldi	r21, 0x11	; 17
 a00:	07 c0       	rjmp	.+14     	; 0xa10 <__udivmodhi4_ep>

00000a02 <__udivmodhi4_loop>:
 a02:	aa 1f       	adc	r26, r26
 a04:	bb 1f       	adc	r27, r27
 a06:	a6 17       	cp	r26, r22
 a08:	b7 07       	cpc	r27, r23
 a0a:	10 f0       	brcs	.+4      	; 0xa10 <__udivmodhi4_ep>
 a0c:	a6 1b       	sub	r26, r22
 a0e:	b7 0b       	sbc	r27, r23

00000a10 <__udivmodhi4_ep>:
 a10:	88 1f       	adc	r24, r24
 a12:	99 1f       	adc	r25, r25
 a14:	5a 95       	dec	r21
 a16:	a9 f7       	brne	.-22     	; 0xa02 <__udivmodhi4_loop>
 a18:	80 95       	com	r24
 a1a:	90 95       	com	r25
 a1c:	bc 01       	movw	r22, r24
 a1e:	cd 01       	movw	r24, r26
 a20:	08 95       	ret

00000a22 <_exit>:
 a22:	f8 94       	cli

00000a24 <__stop_program>:
 a24:	ff cf       	rjmp	.-2      	; 0xa24 <__stop_program>
